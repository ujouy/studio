// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent that generates streetwear graphics based on user descriptions.
 *
 * - generateStreetwearGraphic - A function that generates a streetwear graphic.
 * - GenerateStreetwearGraphicInput - The input type for the generateStreetwearGraphic function.
 * - GenerateStreetwearGraphicOutput - The return type for the generateStreetwearGraphic function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateStreetwearGraphicInputSchema = z.object({
  description: z
    .string()
    .describe('A description of the streetwear graphic to generate.'),
  negativePrompt: z
    .string()
    .optional()
    .describe('A description of what to avoid in the generated graphic.'),
});
export type GenerateStreetwearGraphicInput = z.infer<
  typeof GenerateStreetwearGraphicInputSchema
>;

const GenerateStreetwearGraphicOutputSchema = z.object({
  graphicDataUri: z
    .string()
    .describe(
      'The generated streetwear graphic as a data URI that must include a MIME type and use Base64 encoding. Expected format: \'data:<mimetype>;base64,<encoded_data>\'.'
    ),
});
export type GenerateStreetwearGraphicOutput = z.infer<
  typeof GenerateStreetwearGraphicOutputSchema
>;

export async function generateStreetwearGraphic(
  input: GenerateStreetwearGraphicInput
): Promise<GenerateStreetwearGraphicOutput> {
  return generateStreetwearGraphicFlow(input);
}

const generateStreetwearGraphicPrompt = ai.definePrompt({
  name: 'generateStreetwearGraphicPrompt',
  input: {schema: GenerateStreetwearGraphicInputSchema},
  output: {schema: GenerateStreetwearGraphicOutputSchema},
  prompt: `Generate a streetwear graphic based on the following description: {{{description}}}. The image should be high-quality and suitable for printing on clothing. Return the image as a base64 encoded data URI.`,
});

const generateStreetwearGraphicFlow = ai.defineFlow(
  {
    name: 'generateStreetwearGraphicFlow',
    inputSchema: GenerateStreetwearGraphicInputSchema,
    outputSchema: GenerateStreetwearGraphicOutputSchema,
  },
  async input => {
    const {media} = await ai.generate({
      model: 'googleai/imagen-4.0-fast-generate-001',
      prompt: input.description,
      config: {
        negativePrompt: input.negativePrompt,
      },
    });
    if (!media) {
      throw new Error('No image was generated.');
    }
    return {graphicDataUri: media.url!};
  }
);
